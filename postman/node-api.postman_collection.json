{
	"info": {
		"_postman_id": "b4942901-37b1-48ca-a5cd-00604cb9044b",
		"name": "node-api",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "1453931",
		"_collection_link": "https://red-firefly-245852.postman.co/workspace/demo-kafka~abdf0a6b-2e0c-47bb-8200-c087efca8105/collection/1453931-b4942901-37b1-48ca-a5cd-00604cb9044b?action=share&source=collection_link&creator=1453931"
	},
	"item": [
		{
			"name": "Get product by id with success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response body matches JSON schema\", function () {",
							"    const schema = {",
							"        type: \"object\",",
							"        properties: {",
							"            id: { type: \"integer\" },",
							"            name: { type: \"string\" },",
							"            price: { type: \"number\" }",
							"        },",
							"        required: [\"id\", \"name\", \"price\"]",
							"    };",
							"",
							"    pm.expect(tv4.validate(response, schema)).to.be.true;",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://localhost:3000/products/1"
			},
			"response": []
		},
		{
			"name": "Get product by id with product not found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 404\", function () {",
							"    pm.expect(pm.response.code).to.equal(404);",
							"});",
							"",
							"pm.test(\"Check error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(\"Product is=2 not found in system\").to.eql(jsonData.message);",
							"});",
							"",
							"const response = pm.response.json();",
							"const jsonSchema = {",
							"    type: \"object\",",
							"    properties: {",
							"        message: {",
							"            type: \"string\"",
							"        }",
							"    },",
							"    required: [\"message\"]",
							"};",
							"",
							"",
							"pm.test(\"Response contains expected message\", function () {",
							"    pm.expect(response.message).to.exist;",
							"    pm.expect(response.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://localhost:3000/products/2"
			},
			"response": []
		},
		{
			"name": "Get product by id with error",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 500\", function () {",
							"    pm.expect(pm.response.code).to.equal(500);",
							"});",
							"",
							"pm.test(\"Check error message\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(\"System error\").to.eql(jsonData.message);",
							"});",
							"",
							"const response = pm.response.json();",
							"const jsonSchema = {",
							"    type: \"object\",",
							"    properties: {",
							"        message: {",
							"            type: \"string\"",
							"        }",
							"    },",
							"    required: [\"message\"]",
							"};",
							"",
							"",
							"pm.test(\"Response contains expected message\", function () {",
							"    pm.expect(response.message).to.exist;",
							"    pm.expect(response.message).to.be.a('string');",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": "http://localhost:3000/products/3"
			},
			"response": []
		}
	]
}